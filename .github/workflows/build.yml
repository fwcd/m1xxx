name: Build

on:
  push:
    # Only run on branches (not tags)
    branches:
    - '*'
  workflow_dispatch:
  # TODO: Reenable once automerge is enabled again
  # workflow_run:
  #   workflows: [Automerge]
  #   types: [completed]

jobs:
  build:
    runs-on: macos-10.15
    env:
      DEPS_BASE_NAME: mixxx-deps-arm64-macos
      DMG_BASE_NAME: mixxx-arm64-macos
      VCPKG_DEFAULT_TRIPLET: arm64-osx-min1100
      VCPKG_DEFAULT_HOST_TRIPLET: x64-osx-min1012
      VCPKG_OVERLAY_TRIPLETS: vcpkg/overlay/triplets
      VCPKG_OVERLAY_PORTS: vcpkg/overlay/osx:vcpkg/overlay/ports
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg
      MIXXX_ROOT: ${{ github.workspace }}/mixxx
      SCRIPTS_ROOT: ${{ github.workspace }}/scripts
      DEVELOPER_DIR: /Applications/Xcode_12.2.app/Contents/Developer
      SDKROOT: /Applications/Xcode_12.2.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX11.0.sdk
    
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    - name: Fetch versions and paths
      id: vars
      run: |
        for mod in "${{ env.VCPKG_ROOT }}" "${{ env.MIXXX_ROOT }}"; do
          echo "::set-output name=$(basename "$mod")-commit::$(cd $mod && git rev-parse HEAD)"
          echo "::set-output name=$(basename "$mod")-commit-short::$(cd $mod && git rev-parse --short HEAD)"
        done
        echo "::set-output name=mixxx-version::$(scripts/mixxx-version)"
        echo "::set-output name=home::$HOME"
      shell: bash
    - name: Set up build environment
      run: |
        brew install nasm automake ccache ninja
        /bin/bash -c "sudo xcode-select --switch ${{ env.DEVELOPER_DIR }}"
        xcrun --show-sdk-version

    # Build dependencies

    - name: Bootstrap vcpkg
      run: ${{ env.SCRIPTS_ROOT }}/bootstrap-vcpkg
    - name: Set up vcpkg cache
      uses: actions/cache@v3
      with:
        path: ${{ env.VCPKG_ROOT }}/installed
        # TODO: Include hashed list of installed packages in key?
        key: vcpkg-installed-${{ env.VCPKG_DEFAULT_TRIPLET }}-${{ steps.vars.outputs.vcpkg-commit }}-${{ github.ref }}-${{ github.run_number }}
        restore-keys: |
          vcpkg-installed-${{ env.VCPKG_DEFAULT_TRIPLET }}-${{ steps.vars.outputs.vcpkg-commit }}-${{ github.ref }}-
          vcpkg-installed-${{ env.VCPKG_DEFAULT_TRIPLET }}-${{ steps.vars.outputs.vcpkg-commit }}-
    - name: Check disk space
      run: df -h
    - name: Install vcpkg packages
      run: ${{ env.SCRIPTS_ROOT }}/install-vcpkg-deps
    - name: Upload vcpkg build logs
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: vcpkg-buildlogs
        path: ${{ env.VCPKG_ROOT }}/buildtrees/**/*.log
    
    # Export dependency archive to artifacts

    # - name: Export vcpkg archive
    #   run: >-
    #     ${{ env.SCRIPTS_ROOT }}/vcpkg export
    #     --x-all-installed
    #     --zip
    #     --output="${{ env.DEPS_BASE_NAME }}-${{ steps.vars.outputs.vcpkg-commit-short }}"
    # - name: Upload vcpkg archive
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: ${{ env.DEPS_BASE_NAME }}-${{ steps.vars.outputs.vcpkg-commit-short }}
    #     path: ${{ env.VCPKG_ROOT }}/${{ env.DEPS_BASE_NAME }}-${{ steps.vars.outputs.vcpkg-commit-short }}.zip

    # Build Mixxx

    - name: Configure build cache size
      run: ccache -M 500M
    - name: Set up build cache
      uses: actions/cache@v3
      with:
        path: ${{ steps.vars.outputs.home }}/Library/Caches/ccache
        key: ccache-${{ steps.vars.outputs.mixxx-commit }}-${{ github.ref }}-${{ github.run_number }}
        restore-keys: |
          ccache-${{ steps.vars.outputs.mixxx-commit }}-${{ github.ref }}-
          ccache-${{ steps.vars.outputs.mixxx-commit }}-
          ccache-
    - name: Configure Mixxx build
      run: >-
        cmake
        -G Ninja
        -B build
        -DCMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake
        -DCMAKE_BUILD_TYPE=RelWithDebInfo
        -DMACOS_BUNDLE=ON
        -DCMAKE_C_COMPILER=$(xcrun -find cc)
        -DCMAKE_CXX_COMPILER=$(xcrun -find c++)
        -DAPPLE_CODESIGN_IDENTITY=-
      working-directory: mixxx
    - name: Upload Mixxx configuration logs
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: mixxx-configurelogs
        path: ${{ env.MIXXX_ROOT }}/build/CMakeFiles/*.log
    - name: Build Mixxx
      run: cmake --build build
      working-directory: mixxx
    - name: Package Mixxx
      run: cpack -G DragNDrop -V
      working-directory: mixxx/build
    - name: Upload packaged Mixxx binaries
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.DMG_BASE_NAME }}
        path: ${{ env.MIXXX_ROOT }}/build/*.dmg
    - name: Create tag
      id: tag
      run: |
        version="${{ steps.vars.outputs.mixxx-version }}"
        tag="v$version"
        git fetch --tags
        if git rev-parse "$tag" >/dev/null 2>&1; then
          echo "::set-output name=created::false"
        else
          git tag -am "Version $version" "$tag"
          git push origin "$tag"
          echo "::set-output name=tag::$tag"
          echo "::set-output name=created::true"
        fi
      shell: bash
    - name: Create GitHub release
      if: ${{ steps.tag.outputs.created == 'true' }}
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.tag.outputs.tag }}
        name: ${{ steps.vars.outputs.mixxx-version }}
        files: ${{ env.MIXXX_ROOT }}/build/*.dmg
