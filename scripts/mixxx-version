#!/usr/bin/env python3

import argparse
import pathlib
import re
import subprocess

ROOT = pathlib.Path(__file__).resolve().parent.parent
MIXXX_ROOT = ROOT / 'mixxx'
CMAKELISTS_PATH = MIXXX_ROOT / 'CMakeLists.txt'

def main():
    parser = argparse.ArgumentParser(description='Fetches the Mixxx version')
    parser.add_argument('-s', '--short', action='store_true', help='Only fetch the version number.')
    parser.add_argument('-p', '--prerelease-suffix', action='store_true', help='Add the prerelease suffix.')
    parser.add_argument('-n', '--nonmonotonic', action='store_false', dest='monotonic', help='Skip adding the Git commit count to ensure monotonicity.')

    args = parser.parse_args()
    parts = []

    # Read actual version
    with open(CMAKELISTS_PATH, 'r') as f:
        for line in f.readlines():
            version = re.search(r'^\s*project\(\s*mixxx\s+VERSION\s+(\S+)', line)
            if version:
                parts.append(version[1])
            if args.prerelease_suffix:
                prerelease = re.search(r'^\s*set\(MIXXX_VERSION_PRERELEASE\s+"(.+)"\)', line)
                if prerelease:
                    parts.append(prerelease[1])

    # Read Git commit count for monotonicity
    if not args.short or not args.monotonic:
        git_output = subprocess.run(['git', 'rev-list', '--count', 'HEAD'], cwd=MIXXX_ROOT, capture_output=True, encoding='utf-8')
        git_commit_count = git_output.stdout.strip()
        if git_commit_count:
            parts.append(f'c{git_commit_count}')
    
    # Read Git version
    if not args.short:
        git_output = subprocess.run(['git', 'rev-parse', '--short', 'HEAD'], cwd=MIXXX_ROOT, capture_output=True, encoding='utf-8')
        git_version = git_output.stdout.strip()
        if git_version:
            parts.append(f'r{git_version}')

    print('.'.join(parts))

if __name__ == '__main__':
    main()
